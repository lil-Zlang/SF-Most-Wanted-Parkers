================================================================================
SF'S MOST WANTED PARKERS - DEVELOPMENT DOCUMENTATION
================================================================================

Last Updated: Wednesday, October 15, 2025 - Current Session
Latest Update: Google Maps Platform Integration - COMPLETE

Update Summary:
- âœ… Migrated from Leaflet to Google Maps Platform
- âœ… Installed and configured Google Maps JavaScript API
- âœ… Created MapView component using Google Maps
- âœ… Implemented dynamic script loading for Google Maps
- âœ… Added color-coded circular markers with custom icons
- âœ… Implemented info windows with detailed statistics
- âœ… Added zoom-based street-level marker visibility (zoom 15+)
- âœ… Created GOOGLE_MAPS_SETUP.md comprehensive guide
- âœ… Added .env.local.example for API key configuration
- âœ… Updated NeighborhoodHeatMap with Google Maps branding
- âœ… Build tested successfully with no errors
- âœ… All linting passed
- âœ… Zero TypeScript errors

================================================================================
PROJECT OVERVIEW
================================================================================

"SF's Most Wanted Parkers" is a single-page web application that displays a 
leaderboard of the worst parking offenders in San Francisco based on SFMTA 
Parking Citations data from 2020 onwards.

Tech Stack:
- Frontend: Next.js 14 (App Router), React 18, TypeScript
- Styling: Tailwind CSS
- Maps: Google Maps Platform (JavaScript API)
- Data Processing: Python 3 with Pandas
- Testing: Jest + React Testing Library (frontend), Pytest (backend)

================================================================================
PROJECT STRUCTURE
================================================================================

SF-Most-Wanted-Parkers/
â”œâ”€â”€ app/                          # Next.js App Router pages
â”‚   â”œâ”€â”€ layout.tsx               # Root layout with metadata
â”‚   â”œâ”€â”€ page.tsx                 # Main leaderboard page (with heat map)
â”‚   â”œâ”€â”€ globals.css              # Global styles and Tailwind imports
â”‚   â””â”€â”€ plate/[plateNumber]/     # Dynamic route for plate details
â”‚       â””â”€â”€ page.tsx             # Individual plate "rap sheet" page
â”œâ”€â”€ components/                   # React components
â”‚   â”œâ”€â”€ SearchBar.tsx            # License plate search component
â”‚   â”œâ”€â”€ LeaderboardTable.tsx     # Top 100 offenders table
â”‚   â”œâ”€â”€ TicketMap.tsx            # Interactive map with citation locations
â”‚   â”œâ”€â”€ NeighborhoodHeatMap.tsx  # Heat map parent component (NEW!)
â”‚   â””â”€â”€ MapView.tsx              # Leaflet map rendering component (NEW!)
â”œâ”€â”€ types/                        # TypeScript type definitions
â”‚   â””â”€â”€ index.ts                 # Shared types for the application
â”œâ”€â”€ public/                       # Static assets
â”‚   â””â”€â”€ data/                    # JSON data files (generated by Python script)
â”‚       â”œâ”€â”€ leaderboard.json     # Top 100 offenders
â”‚       â”œâ”€â”€ all_plates_details.json  # Complete plate details
â”‚       â”œâ”€â”€ neighborhood_heatmap.json  # Neighborhood aggregations (NEW!)
â”‚       â””â”€â”€ coordinate_heatmap.json    # Street-level coordinates (NEW!)
â”œâ”€â”€ __tests__/                    # Test files
â”‚   â”œâ”€â”€ components/              # Component tests
â”‚   â”‚   â”œâ”€â”€ SearchBar.test.tsx
â”‚   â”‚   â””â”€â”€ LeaderboardTable.test.tsx
â”‚   â””â”€â”€ process_data.test.py     # Python script tests
â”œâ”€â”€ process_data.py              # Python data processing script
â”œâ”€â”€ requirements.txt             # Python dependencies
â”œâ”€â”€ requirements-dev.txt         # Python dev dependencies
â”œâ”€â”€ package.json                 # Node.js dependencies and scripts
â”œâ”€â”€ tsconfig.json                # TypeScript configuration
â”œâ”€â”€ tailwind.config.ts           # Tailwind CSS configuration
â”œâ”€â”€ jest.config.js               # Jest testing configuration
â”œâ”€â”€ pytest.ini                   # Pytest configuration
â””â”€â”€ README.md                    # User-facing documentation

================================================================================
PHASE 1: DATA PROCESSING PIPELINE
================================================================================

File: process_data.py

Purpose:
- Process SFMTA Parking Citations dataset (from API or CSV)
- Filters, aggregates, and exports optimized JSON files for the web app
- NEW: Download filtered data directly from SF Open Data API

Features:
âœ“ API Download: Fetch data with server-side filtering (NEW!)
âœ“ Data Loading: Ingests CSV files with robust error handling
âœ“ Date Filtering: Discards citations before configurable date
âœ“ Plate Grouping: Groups all citations by vehicle plate number
âœ“ Aggregation: Calculates total fines, citation counts, favorite violations
âœ“ Geolocation: Preserves latitude/longitude for map visualization
âœ“ Export: Generates two JSON files for the frontend
âœ“ API Token Support: Higher rate limits with Socrata API token

Usage:

  # RECOMMENDED: Download from API with filtering (avoids 20M row download)
  python process_data.py --api --start-date 2020-01-01 --limit 500000
  
  # Traditional: Process from CSV file
  python process_data.py <input_csv_file>

Examples:

  # Download last 5 years with 500k record limit
  python process_data.py --api --start-date 2020-01-01 --limit 500000
  
  # Download specific year
  python process_data.py --api --start-date 2023-01-01 --end-date 2023-12-31
  
  # Download all matching records (no limit)
  python process_data.py --api --start-date 2022-01-01 --limit 0
  
  # Process from CSV with custom start date
  python process_data.py parking_citations.csv --start-date 2021-01-01

Input Requirements:
- CSV file with columns: vehicle_plate, fine_amount, citation_issued_datetime,
  violation_description, latitude, longitude
- Column names are flexible (script attempts to auto-map variations)

Output Files:
1. public/data/leaderboard.json
   - Array of top 100 offenders sorted by total fines
   - Fields: rank, plate, total_fines, citation_count

2. public/data/all_plates_details.json
   - Object with all plates as keys
   - Fields: total_fines, citation_count, favorite_violation, all_citations[]

3. public/data/neighborhood_heatmap.json (NEW - October 15, 2025)
   - Array of neighborhoods with aggregated citation data
   - Fields: neighborhood, latitude, longitude, total_fines, citation_count, 
     top_violation, intensity
   - Used for heat map visualization

4. public/data/coordinate_heatmap.json (NEW - October 15, 2025)
   - Array of individual citation coordinates (sampled to 10k max)
   - Fields: lat, lon, fine, violation
   - Used for street-level detail view when zoomed in

API Download (NEW - October 14, 2025):
âœ“ Direct download from Socrata API endpoint
âœ“ Server-side filtering using SoQL (Socrata Query Language)
âœ“ Automatic pagination (50,000 records per request)
âœ“ Progress tracking during download
âœ“ Optional API token for higher rate limits
âœ“ Configurable date ranges and record limits
âœ“ Automatic column name mapping from API format

Benefits of API Download:
- Avoid downloading 20M+ row dataset
- Filter data BEFORE download (saves time & bandwidth)
- Get latest data without manual CSV export
- Flexible date range filtering
- Limit download size for testing/development

API Token Setup (Optional but Recommended):
1. Register at: https://dev.socrata.com/register
2. Create .env file: SOCRATA_APP_TOKEN=your_token_here
3. Provides 100x higher rate limits

Data Validation:
âœ“ Handles missing/null values gracefully
âœ“ Converts invalid fine amounts to 0
âœ“ Filters out invalid dates
âœ“ Normalizes plate numbers to uppercase
âœ“ Validates latitude/longitude ranges
âœ“ Column name variations handled automatically

================================================================================
PHASE 2: NEXT.JS FRONTEND APPLICATION
================================================================================

Architecture:
- Server-side rendering (SSR) for initial page load
- Client-side components for interactivity
- Static JSON data loaded at build/request time
- No live database queries

--------------------------------------------------------------------------------
1. MAIN LEADERBOARD PAGE (/)
--------------------------------------------------------------------------------

File: app/page.tsx

Features:
âœ“ Server component that loads leaderboard.json
âœ“ Header with title and subtitle
âœ“ Search bar for finding specific plates
âœ“ Responsive table showing top 100 offenders
âœ“ Medal icons (ðŸ¥‡ðŸ¥ˆðŸ¥‰) for top 3 positions
âœ“ Formatted currency and numbers with commas
âœ“ Click-through links to individual plate pages

Components Used:
- SearchBar: License plate search input
- NeighborhoodHeatMap: Interactive map showing most fined areas (NEW!)
- LeaderboardTable: Displays top 100 offenders

Data Flow:
1. Server loads leaderboard.json at request time
2. Data passed to client components as props
3. Client components handle user interactions

--------------------------------------------------------------------------------
2. PLATE DETAILS PAGE (/plate/[plateNumber])
--------------------------------------------------------------------------------

File: app/plate/[plateNumber]/page.tsx

Features:
âœ“ Dynamic route based on license plate number
âœ“ Server-side data loading from all_plates_details.json
âœ“ 404-like handling for non-existent plates
âœ“ Key statistics cards (fines, citations, favorite violation)
âœ“ Interactive map with all ticket locations
âœ“ Complete citation history table
âœ“ Sorted by date (most recent first)

Components Used:
- TicketMap: React Leaflet map with markers (dynamically imported, no SSR)

Data Validation:
âœ“ URL decoding for special characters in plates
âœ“ Case-insensitive plate matching (normalized to uppercase)
âœ“ Graceful handling of missing location data
âœ“ Date parsing with fallback for invalid dates

--------------------------------------------------------------------------------
3. SEARCH FUNCTIONALITY
--------------------------------------------------------------------------------

File: components/SearchBar.tsx

Features:
âœ“ Client component with controlled input
âœ“ Form submission handler
âœ“ Input validation (non-empty check)
âœ“ Automatic uppercase conversion
âœ“ Whitespace trimming
âœ“ URL encoding for safe navigation
âœ“ Alert for empty submissions

User Flow:
1. User enters license plate
2. Validation on submit
3. Navigate to /plate/[PLATE] route
4. Plate details page handles existence check

--------------------------------------------------------------------------------
4. LEADERBOARD TABLE COMPONENT
--------------------------------------------------------------------------------

File: components/LeaderboardTable.tsx

Features:
âœ“ Client component for interactivity
âœ“ Responsive table layout
âœ“ Hover effects for better UX
âœ“ Medal icons for top 3
âœ“ Red background highlight for top 3
âœ“ Formatted currency (2 decimal places)
âœ“ Formatted numbers with thousand separators
âœ“ Links to individual plate pages
âœ“ Empty state handling

Accessibility:
âœ“ Semantic HTML (table elements)
âœ“ Proper contrast ratios
âœ“ Hover states for interactive elements

--------------------------------------------------------------------------------
5. TICKET MAP COMPONENT
--------------------------------------------------------------------------------

File: components/TicketMap.tsx

Features:
âœ“ Client-only component (no SSR)
âœ“ Interactive OpenStreetMap via React Leaflet
âœ“ Marker for each citation with valid coordinates
âœ“ Popup on marker click with violation details
âœ“ Auto-centering based on citation locations
âœ“ Fallback UI for missing location data
âœ“ Loading state during hydration

Technical Details:
- Dynamically imported to avoid SSR issues
- Leaflet CSS loaded in layout.tsx
- Fixed marker icon paths for production
- Filters out invalid coordinates before rendering

Map Controls:
âœ“ Zoom in/out
âœ“ Pan/drag
âœ“ Scroll wheel zoom
âœ“ Click markers for details

--------------------------------------------------------------------------------
6. NEIGHBORHOOD HEAT MAP COMPONENT (NEW - October 15, 2025)
--------------------------------------------------------------------------------

Files: 
- components/NeighborhoodHeatMap.tsx (Parent component)
- components/MapView.tsx (Google Maps implementation)
- GOOGLE_MAPS_SETUP.md (Setup guide)
- .env.local.example (API key template)

Features:
âœ“ **Google Maps Platform integration** - Superior mapping data and UI
âœ“ Interactive map visualization of most fined SF neighborhoods
âœ“ Color-coded circular markers based on citation intensity
âœ“ Dynamic marker sizing based on citation count
âœ“ 43 San Francisco neighborhoods mapped with coordinates
âœ“ Heat map legend with 5-tier color coding
âœ“ Info windows with detailed statistics
âœ“ Zoom-based street-level markers (appear at zoom 15+)
âœ“ Async data loading with loading states
âœ“ Client-side only (no SSR) using dynamic imports
âœ“ Graceful error handling with setup instructions
âœ“ Responsive design

Neighborhoods Covered:
- Downtown/Central: Chinatown, Financial District, Nob Hill, North Beach,
  Russian Hill, Telegraph Hill, Tenderloin, Union Square
- Mission/Southeast: Bernal Heights, The Castro, Dogpatch, Excelsior,
  Glen Park, Mission District, Mission Bay, Noe Valley, Portola, 
  Potrero Hill, SoMa, Visitacion Valley
- West Side: Haight-Ashbury, Inner/Outer Richmond, Inner/Outer Sunset,
  Presidio, Sunset District, Twin Peaks, West Portal
- Northwest: Cow Hollow, Marina District, Pacific Heights
- Other: Alamo Square, Embarcadero, Fisherman's Wharf, Hayes Valley,
  Lower Haight, Lower Pacific Heights, Western Addition

Color Coding:
- Red (highest): Top 20% of citations
- Orange (high): 60-80% range
- Amber (moderate): 40-60% range
- Yellow (low): 20-40% range
- Lime (lowest): Bottom 20%

Technical Implementation:
- **Google Maps JavaScript API** - Official Google mapping solution
- Dynamic script loading (loads from Google CDN)
- API key authentication via environment variables
- Dynamic import to prevent SSR issues
- Custom marker icons using SymbolPath.CIRCLE
- Info windows with HTML content
- Event listeners for zoom-based marker visibility
- Geodesic distance calculation for neighborhood assignment
- Coordinate sampling (max 10k points) for performance
- Marker state management with refs

Data Flow:
1. Component loads neighborhood and coordinate data from JSON
2. MapView renders Leaflet map with OpenStreetMap tiles
3. Neighborhood markers placed at approximate centers
4. Individual coordinate markers for street-level view
5. User can zoom and pan to explore
6. Click markers for detailed popup information

Performance Optimizations:
âœ“ Dynamic imports for code splitting
âœ“ Coordinate sampling to limit render overhead
âœ“ Client-side only rendering (no SSR)
âœ“ Lazy Google Maps script loading
âœ“ Event-driven street marker toggling
âœ“ Optimized marker rendering with Google Maps API
âœ“ Conditional script loading (checks if already loaded)

================================================================================
TESTING STRATEGY
================================================================================

Frontend Tests (Jest + React Testing Library):
âœ“ SearchBar.test.tsx: Input validation, navigation, edge cases
âœ“ LeaderboardTable.test.tsx: Rendering, formatting, links, empty states

Coverage Goals:
- Minimum 80% coverage across all metrics
- Unit tests for components
- Integration tests for user flows

Backend Tests (Pytest):
âœ“ process_data.test.py: Data loading, filtering, aggregation, file generation
âœ“ Edge case handling: empty data, invalid values, missing columns

Running Tests:
  # Frontend
  npm test              # Run once
  npm run test:watch    # Watch mode

  # Backend
  pytest                # Run all tests
  pytest --cov          # With coverage report

================================================================================
DATA CONTRACTS & TYPE SAFETY
================================================================================

TypeScript Interfaces (types/index.ts):

LeaderboardEntry:
- rank: number (1-100)
- plate: string (uppercase)
- total_fines: number (USD, 2 decimals)
- citation_count: number (positive integer)

PlateDetails:
- total_fines: number
- citation_count: number
- favorite_violation: string
- all_citations: Citation[]

Citation:
- date: string | null (ISO format)
- violation: string
- latitude?: number (optional)
- longitude?: number (optional)

Validation Strategy:
âœ“ TypeScript compile-time checks
âœ“ Runtime validation in components
âœ“ Graceful degradation for missing data

================================================================================
ERROR HANDLING & EDGE CASES
================================================================================

Input Validation:
âœ“ Empty search queries â†’ Alert message
âœ“ Invalid plate numbers â†’ 404-style page
âœ“ Missing data files â†’ Empty state messages
âœ“ Invalid coordinates â†’ Map fallback UI
âœ“ Malformed dates â†’ Display "N/A"

Error Recovery:
âœ“ Try-catch blocks in async operations
âœ“ Console logging for debugging
âœ“ User-friendly error messages
âœ“ Graceful fallbacks (no crashes)

Data Quality:
âœ“ Null/undefined checks throughout
âœ“ Type guards for optional fields
âœ“ Filtering invalid records in Python script
âœ“ Defensive programming patterns

================================================================================
PERFORMANCE OPTIMIZATIONS
================================================================================

Data Strategy:
âœ“ Pre-processed static JSON (no database queries)
âœ“ Top 100 leaderboard cached in separate file
âœ“ Client-side search (no API calls)

Frontend:
âœ“ Server-side rendering for initial load
âœ“ Dynamic imports for map (code splitting)
âœ“ Optimized images via Next.js
âœ“ Minimal JavaScript bundle size

Rendering:
âœ“ React Server Components where possible
âœ“ Client components only where needed
âœ“ No unnecessary re-renders
âœ“ Efficient list rendering with keys

================================================================================
STYLING & UI/UX
================================================================================

Design System:
- Tailwind CSS utility-first approach
- Custom color palette (primary blues, accent reds)
- Consistent spacing and typography
- Responsive breakpoints (mobile-first)

Components:
âœ“ Card-based layouts for statistics
âœ“ Shadow and rounded corners for depth
âœ“ Hover effects for interactivity
âœ“ Loading states for async operations
âœ“ Medal emojis for gamification

Responsive Design:
âœ“ Mobile: Single column, stacked cards
âœ“ Tablet: Two-column grids
âœ“ Desktop: Three-column grids, full-width table

Accessibility:
âœ“ Semantic HTML elements
âœ“ ARIA labels where appropriate
âœ“ Keyboard navigation support
âœ“ High contrast text
âœ“ Focus indicators

================================================================================
DEPLOYMENT GUIDE
================================================================================

Prerequisites:
1. Node.js 18+ and npm
2. Python 3.9+ with pandas
3. SFMTA Parking Citations dataset (CSV)

Setup Steps:

1. Install Python dependencies:
   pip install -r requirements.txt

2. (Optional) Setup API token for faster downloads:
   echo "SOCRATA_APP_TOKEN=your_token" > .env

3. Process the data:
   # RECOMMENDED: Download from API
   python process_data.py --api --start-date 2020-01-01 --limit 500000
   
   # OR: Process from CSV file
   python process_data.py path/to/citations.csv

4. Install Node.js dependencies:
   npm install

5. Run development server:
   npm run dev

6. Build for production:
   npm run build
   npm start

Production Deployment:
- Supports Vercel, Netlify, or any Node.js hosting
- Ensure public/data/*.json files are included
- Set NODE_ENV=production
- Configure environment variables if needed

Environment Variables:
- SOCRATA_APP_TOKEN: (Optional) SF Open Data API token for higher rate limits
  Get free token at: https://dev.socrata.com/register
- None required for basic frontend functionality
- Can add analytics, monitoring services

================================================================================
MAINTENANCE & UPDATES
================================================================================

Data Refresh:

Option 1 - API Download (Recommended):
1. Run: python process_data.py --api --start-date 2020-01-01 --limit 0
2. Rebuild Next.js app: npm run build
3. Redeploy

Option 2 - CSV Upload:
1. Obtain latest SFMTA dataset CSV
2. Run: python process_data.py new_data.csv
3. Rebuild Next.js app: npm run build
4. Redeploy

Adding Features:
- New visualizations: Add to components/
- New data fields: Update types/index.ts
- New pages: Add to app/ directory

Code Quality:
âœ“ ESLint for linting
âœ“ TypeScript for type safety
âœ“ Prettier for formatting (optional)
âœ“ Pre-commit hooks (optional)

================================================================================
SECURITY CONSIDERATIONS
================================================================================

âœ“ No user authentication (public data)
âœ“ No user-generated content
âœ“ Input sanitization in search
âœ“ URL encoding for plate numbers
âœ“ No sensitive data exposure
âœ“ No API keys required (using public maps)

Best Practices:
- Keep dependencies updated
- Monitor for security vulnerabilities
- Use HTTPS in production
- Implement CSP headers (optional)

================================================================================
KNOWN LIMITATIONS & FUTURE ENHANCEMENTS
================================================================================

Current Limitations:
- Static data only (no real-time updates)
- Limited to top 100 leaderboard display
- No pagination for full plate list
- Map requires JavaScript enabled

Potential Enhancements:
â–¡ Add filters (by year, violation type, location)
â–¡ Implement pagination for beyond top 100
â–¡ Add charts/graphs for trends over time
â–¡ Compare multiple plates side-by-side
â–¡ Export functionality (PDF, CSV)
â–¡ Social sharing features
âœ“ Heat map of violation hotspots (COMPLETED - October 15, 2025)
â–¡ Animated transitions
â–¡ Time-based heat map animation
â–¡ Advanced clustering for street-level view
â–¡ 3D heat map visualization

================================================================================
TROUBLESHOOTING
================================================================================

Issue: "No data available" message
Solution: Run process_data.py to generate JSON files

Issue: Map not loading
Solution: Check that Leaflet CSS is loaded, JavaScript is enabled

Issue: Plate not found
Solution: Verify plate exists in all_plates_details.json, check case

Issue: Build errors
Solution: Clear .next folder, reinstall node_modules, verify Node version

Issue: Slow performance
Solution: Check JSON file sizes, optimize images, enable caching

================================================================================
CHANGELOG
================================================================================

Version 1.2.0 - October 15, 2025 (Current Session)
- âœ“ NEW: **Google Maps Platform integration** with official JavaScript API
- âœ“ NEW: 43 San Francisco neighborhood mappings with coordinates
- âœ“ NEW: Geodesic distance-based neighborhood assignment algorithm
- âœ“ NEW: Color-coded circular markers (5-tier intensity system)
- âœ“ NEW: Dynamic marker sizing based on citation count
- âœ“ NEW: Zoom-based street-level markers (appear at zoom 15+)
- âœ“ NEW: Info windows with detailed statistics
- âœ“ NEW: NeighborhoodHeatMap component with async data loading
- âœ“ NEW: MapView component using Google Maps JavaScript API
- âœ“ NEW: GOOGLE_MAPS_SETUP.md comprehensive setup guide
- âœ“ NEW: .env.local.example for API key configuration
- âœ“ NEW: Dynamic script loading for Google Maps
- âœ“ NEW: neighborhood_heatmap.json data file generation
- âœ“ NEW: coordinate_heatmap.json with sampled street coordinates
- âœ“ UPDATED: process_data.py with location aggregation logic
- âœ“ UPDATED: Main page with Google Maps-branded map component
- âœ“ ADDED: Graceful error handling for missing API key
- âœ“ ADDED: Google Cloud setup instructions
- âœ“ ADDED: Heat map legend with color explanations
- âœ“ IMPROVED: Performance with coordinate sampling (10k max)

Features:
- **Google's superior mapping data** and satellite imagery
- Interactive map allows exploration of citation hotspots
- Click markers for detailed info windows with statistics
- Zoom to level 15+ to see individual citation locations
- Color-coded visual system makes patterns immediately apparent
- Responsive design works on mobile, tablet, and desktop
- Professional UI powered by Google Maps Platform
- Free tier covers typical usage ($200 monthly credit)

Technical Highlights:
- Google Maps JavaScript API official integration
- Dynamic script loading from Google CDN
- API key authentication via environment variables
- Dynamic imports prevent SSR issues
- Efficient geodesic distance algorithm for neighborhood assignment
- Smart coordinate sampling keeps file sizes and render times low
- Event-driven marker visibility based on zoom level
- Fully type-safe TypeScript implementation
- Zero linting errors
- No npm dependencies for maps (CDN-only)

Version 1.1.0 - October 14, 2025 (2:00 PM)
- âœ“ NEW: API download functionality with server-side filtering
- âœ“ NEW: SoQL query support for date range filtering
- âœ“ NEW: Automatic pagination for large datasets
- âœ“ NEW: API token support for higher rate limits
- âœ“ NEW: Command-line argument parsing (argparse)
- âœ“ NEW: Configurable record limits
- âœ“ NEW: Progress tracking during downloads
- âœ“ UPDATED: Python dependencies (added requests, python-dotenv)
- âœ“ UPDATED: process_data.py with dual mode (API/CSV)
- âœ“ ADDED: API_SETUP.md comprehensive guide
- âœ“ IMPROVED: Documentation with API usage examples

Benefits:
- Users can now download filtered data without processing 20M rows locally
- Faster data acquisition (minutes vs hours)
- Flexible filtering options (date ranges, limits)
- Lower bandwidth requirements
- Easier data updates

Version 1.0.0 - October 14, 2025
- âœ“ Initial project setup and architecture
- âœ“ Python data processing script with filtering and aggregation
- âœ“ Next.js app with App Router (SSR)
- âœ“ Main leaderboard page with top 100 offenders
- âœ“ Dynamic plate details pages with "rap sheets"
- âœ“ Interactive search functionality
- âœ“ React Leaflet maps with citation markers
- âœ“ Responsive design with Tailwind CSS
- âœ“ Comprehensive test suite (Jest + Pytest)
- âœ“ Type-safe TypeScript implementation
- âœ“ Error handling and edge case coverage
- âœ“ Documentation (README + dev docs)
- âœ“ Sample data for testing

================================================================================
CONTACT & SUPPORT
================================================================================

For issues, questions, or contributions:
- Review this documentation first
- Check the README.md for quick start guide
- Examine test files for usage examples
- Inspect TypeScript types for data contracts

================================================================================
END OF DOCUMENTATION
================================================================================

